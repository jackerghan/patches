From 5b0cba4daeacc8e688f2adf4d33c41d0e0da067f Mon Sep 17 00:00:00 2001
From: JackE <jacke@fb.com>
Date: Thu, 2 May 2019 08:09:57 -0700
Subject: [PATCH 4/4] Support to empty working set of mapped pages. Right now
 skipping /dev/... in a hacky way as gfx crashes with SIG_BUS

---
 fs/drop_caches.c | 62 ++++++++++++++++++++++++++++++++++++++++++++----
 mm/memory.c      |  2 +-
 2 files changed, 58 insertions(+), 6 deletions(-)

diff --git a/fs/drop_caches.c b/fs/drop_caches.c
index c00e055b628..f6ede17f08a 100644
--- a/fs/drop_caches.c
+++ b/fs/drop_caches.c
@@ -49,19 +49,71 @@ static void drop_slab(void)
 	} while (nr_objects > 10);
 }
 
+void unmap_mapping_range_vma(struct vm_area_struct *vma,
+		unsigned long start_addr, unsigned long end_addr,
+		struct zap_details *details);
+
 int drop_caches_sysctl_handler(ctl_table *table, int write,
 	void __user *buffer, size_t *length, loff_t *ppos)
 {
 	int ret;
 
-	ret = proc_dointvec_minmax(table, write, buffer, length, ppos);
+	ret = proc_dointvec(table, write, buffer, length, ppos);
 	if (ret)
 		return ret;
 	if (write) {
-		if (sysctl_drop_caches & 1)
-			iterate_supers(drop_pagecache_sb, NULL);
-		if (sysctl_drop_caches & 2)
-			drop_slab();
+		if (sysctl_drop_caches > 16) {
+			int pid = sysctl_drop_caches;
+			struct task_struct *task = NULL;
+			rcu_read_lock();
+			task = find_task_by_vpid(pid);
+			if (task)
+				get_task_struct(task);
+			rcu_read_unlock();
+			if (task) {
+				struct mm_struct *mm = get_task_mm(task);
+				printk(KERN_ERR "EMPTY: found proc %d\n", pid);
+				if (mm) {
+					char buf[256];
+					char* path = "";
+					struct vm_area_struct *vma;
+					struct zap_details details;
+					printk(KERN_ERR "EMPTY: found mm %d\n", pid);
+					details.nonlinear_vma = NULL;
+					details.first_index = 0;
+					details.last_index = -1;					
+					down_read(&mm->mmap_sem);
+					for (vma = mm->mmap; vma; vma = vma->vm_next) {
+							if (!vma->vm_file) {
+								continue;
+							}
+							if (vma->vm_flags & VM_LOCKED) {
+								continue;
+							}
+							path = d_path(&vma->vm_file->f_path, buf, sizeof(buf));
+							if (IS_ERR(path)) {
+								snprintf(buf, sizeof(buf), "<error:%ld>", PTR_ERR(path));
+								path = buf;
+							}
+							details.check_mapping = vma->vm_file->f_mapping;
+							printk(KERN_ERR "EMPTY: vma %lx %lx %s\n", vma->vm_start, vma->vm_end, path);
+							if (strncmp(path, "/dev/", 5) == 0) {
+								printk(KERN_ERR "  Skipping /dev/...\n");
+								continue;
+							}
+							unmap_mapping_range_vma(vma, vma->vm_start, vma->vm_end, &details);
+					}
+					up_read(&mm->mmap_sem);
+					mmput(mm);
+				}
+				put_task_struct(task);
+			}
+		} else {
+			if (sysctl_drop_caches & 1)
+				iterate_supers(drop_pagecache_sb, NULL);
+			if (sysctl_drop_caches & 2)
+				drop_slab();
+		}
 	}
 	return 0;
 }
diff --git a/mm/memory.c b/mm/memory.c
index d1d704fb0d3..f1e2aec070e 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -2919,7 +2919,7 @@ unwritable_page:
 	return ret;
 }
 
-static void unmap_mapping_range_vma(struct vm_area_struct *vma,
+void unmap_mapping_range_vma(struct vm_area_struct *vma,
 		unsigned long start_addr, unsigned long end_addr,
 		struct zap_details *details)
 {
-- 
2.17.1

