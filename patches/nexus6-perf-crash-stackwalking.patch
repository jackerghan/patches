From e3d7d613653bf3736d6d80e23c0f8f73c2ab55ee Mon Sep 17 00:00:00 2001
From: JackE <jacke@fb.com>
Date: Mon, 4 Mar 2019 15:00:15 -0800
Subject: [PATCH 1/4] Fix perf crash and add stackwalking

---
 arch/arm/include/asm/perf_event.h |  9 +++++
 arch/arm/Kconfig                  |  2 ++
 arch/arm/configs/shamu_defconfig  |  3 +++
 arch/arm/include/asm/perf_regs.h  | 23 +++++++++++++++++++++++
 arch/arm/kernel/Makefile          |  1 +
 arch/arm/kernel/perf_event.c      |  4 ++--
 arch/arm/kernel/perf_regs.c       | 30 ++++++++++++++++++++++++++++++
 6 files changed, 61 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/include/asm/perf_regs.h
 create mode 100644 arch/arm/kernel/perf_regs.c

 diff --git a/arch/arm/include/asm/perf_event.h b/arch/arm/include/asm/perf_event.h
 index 755877527cf..2f00ca397d8 100644
 --- a/arch/arm/include/asm/perf_event.h
 +++ b/arch/arm/include/asm/perf_event.h
 @@ -28,4 +28,13 @@ extern unsigned long perf_misc_flags(struct pt_regs *regs);
  #define perf_misc_flags(regs)	perf_misc_flags(regs)
  #endif
  
 +register unsigned long perf_current_stack_pointer asm ("sp");
 +
 +#define perf_arch_fetch_caller_regs(regs, __ip) { \
 +    (regs)->ARM_pc = (__ip); \
 +    (regs)->ARM_fp = (unsigned long) __builtin_frame_address(0); \
 +    (regs)->ARM_sp = perf_current_stack_pointer; \
 +    (regs)->ARM_cpsr = SVC_MODE; \
 +}
 +
  #endif /* __ARM_PERF_EVENT_H__ */
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 8abe2b7f1d0..557749665bc 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -50,6 +50,8 @@ config ARM
 	select HAVE_MEMBLOCK
 	select HAVE_OPROFILE if (HAVE_PERF_EVENTS)
 	select HAVE_PERF_EVENTS
+  select HAVE_PERF_REGS
+  select HAVE_PERF_USER_STACK_DUMP
 	select HAVE_REGS_AND_STACK_ACCESS_API
 	select HAVE_SYSCALL_TRACEPOINTS
 	select HAVE_UID16
diff --git a/arch/arm/configs/shamu_defconfig b/arch/arm/configs/shamu_defconfig
index ff721fbd51a..713417c94f6 100644
--- a/arch/arm/configs/shamu_defconfig
+++ b/arch/arm/configs/shamu_defconfig
@@ -172,6 +172,9 @@ CONFIG_PCI_QUIRKS=y
 CONFIG_EMBEDDED=y
 CONFIG_HAVE_PERF_EVENTS=y
 CONFIG_PERF_USE_VMALLOC=y
+CONFIG_USER_STACKTRACE_SUPPORT=y
+CONFIG_HAVE_PERF_USER_STACK_DUMP=y
+CONFIG_HAVE_PERF_REGS=y
 
 #
 # Kernel Performance Events And Counters
diff --git a/arch/arm/include/asm/perf_regs.h b/arch/arm/include/asm/perf_regs.h
new file mode 100644
index 00000000000..ce59448458b
--- /dev/null
+++ b/arch/arm/include/asm/perf_regs.h
@@ -0,0 +1,23 @@
+#ifndef _ASM_ARM_PERF_REGS_H
+#define _ASM_ARM_PERF_REGS_H
+
+enum perf_event_arm_regs {
+	PERF_REG_ARM_R0,
+	PERF_REG_ARM_R1,
+	PERF_REG_ARM_R2,
+	PERF_REG_ARM_R3,
+	PERF_REG_ARM_R4,
+	PERF_REG_ARM_R5,
+	PERF_REG_ARM_R6,
+	PERF_REG_ARM_R7,
+	PERF_REG_ARM_R8,
+	PERF_REG_ARM_R9,
+	PERF_REG_ARM_R10,
+	PERF_REG_ARM_FP,
+	PERF_REG_ARM_IP,
+	PERF_REG_ARM_SP,
+	PERF_REG_ARM_LR,
+	PERF_REG_ARM_PC,
+	PERF_REG_ARM_MAX,
+};
+#endif /* _ASM_ARM_PERF_REGS_H */
diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index 68377029624..3383ca578a3 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -70,6 +70,7 @@ obj-$(CONFIG_CPU_XSC3)		+= xscale-cp0.o
 obj-$(CONFIG_CPU_MOHAWK)	+= xscale-cp0.o
 obj-$(CONFIG_CPU_PJ4)		+= pj4-cp0.o
 obj-$(CONFIG_IWMMXT)		+= iwmmxt.o
+obj-$(CONFIG_PERF_EVENTS)       += perf_regs.o
 obj-$(CONFIG_HW_PERF_EVENTS)	+= perf_event.o perf_event_cpu.o
 AFLAGS_iwmmxt.o			:= -Wa,-mcpu=iwmmxt
 obj-$(CONFIG_ARM_CPU_TOPOLOGY)  += topology.o
diff --git a/arch/arm/kernel/perf_event.c b/arch/arm/kernel/perf_event.c
index 1972d5e89af..c2d8110ea50 100644
--- a/arch/arm/kernel/perf_event.c
+++ b/arch/arm/kernel/perf_event.c
@@ -328,9 +328,9 @@ static irqreturn_t armpmu_dispatch_irq(int irq, void *dev)
 
 	start_clock = sched_clock();
 	if (plat && plat->handle_irq)
-                ret = plat->handle_irq(irq, dev, armpmu->handle_irq);
+                ret = plat->handle_irq(irq, armpmu, armpmu->handle_irq);
         else
-                ret = armpmu->handle_irq(irq, dev);
+                ret = armpmu->handle_irq(irq, armpmu);
         finish_clock = sched_clock();
 
         perf_sample_event_took(finish_clock - start_clock);
diff --git a/arch/arm/kernel/perf_regs.c b/arch/arm/kernel/perf_regs.c
new file mode 100644
index 00000000000..6e4379c67cb
--- /dev/null
+++ b/arch/arm/kernel/perf_regs.c
@@ -0,0 +1,30 @@
+
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/perf_event.h>
+#include <linux/bug.h>
+#include <asm/perf_regs.h>
+#include <asm/ptrace.h>
+
+u64 perf_reg_value(struct pt_regs *regs, int idx)
+{
+	if (WARN_ON_ONCE((u32)idx >= PERF_REG_ARM_MAX))
+		return 0;
+
+	return regs->uregs[idx];
+}
+
+#define REG_RESERVED (~((1ULL << PERF_REG_ARM_MAX) - 1))
+
+int perf_reg_validate(u64 mask)
+{
+	if (!mask || mask & REG_RESERVED)
+		return -EINVAL;
+
+	return 0;
+}
+
+u64 perf_reg_abi(struct task_struct *task)
+{
+	return PERF_SAMPLE_REGS_ABI_32;
+}
-- 
2.17.1

