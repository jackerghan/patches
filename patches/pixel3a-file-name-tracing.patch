From 6a8b0fdc5703bf3dba6193e0b238e2771d6ccfa6 Mon Sep 17 00:00:00 2001
From: Jack Erghan <jacke@fb.com>
Date: Sat, 10 Aug 2019 14:17:20 -0700
Subject: [PATCH 3/3] Add file path for block IOs events, fix RT crash after
 emptying

Change-Id: I665705887a6a894f34a74d58573591ddb7f3e70e
---
 block/blk-core.c             | 28 ++++++++++++++++++++++++
 fs/block_dev.c               |  4 +++-
 fs/buffer.c                  | 18 +++++++++++++--
 fs/drop_caches.c             |  4 ++++
 fs/ext4/ext4.h               | 16 ++++++++++++++
 fs/ext4/inode.c              | 52 +++++++++++++++++++++++++++++++++++++++++++-
 fs/ext4/namei.c              |  2 ++
 fs/ext4/super.c              |  1 +
 fs/fs-writeback.c            |  3 +++
 fs/jbd2/commit.c             |  2 ++
 fs/jbd2/journal.c            |  1 +
 include/linux/buffer_head.h  |  2 ++
 include/linux/fs.h           |  1 +
 include/trace/events/block.h | 28 ++++++++++++++++++++++++
 include/trace/events/ext4.h  | 26 ++++++++++++++++++++++
 kernel/trace/trace.c         |  6 +++++
 16 files changed, 190 insertions(+), 4 deletions(-)

diff --git a/block/blk-core.c b/block/blk-core.c
index abdea59c6c66..1a18da5b253b 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -2076,6 +2076,9 @@ blk_qc_t generic_make_request(struct bio *bio)
 }
 EXPORT_SYMBOL(generic_make_request);
 
+void end_bio_bh_io_sync(struct bio *bio, int err);
+void ext4_trace_inode_path(struct file *filp, struct inode *inode);
+
 /**
  * submit_bio - submit a bio to the block device layer for I/O
  * @bio: The &struct bio which describes the I/O
@@ -2094,6 +2097,31 @@ blk_qc_t submit_bio(struct bio *bio)
 	if (bio_has_data(bio)) {
 		unsigned int count;
 
+		if (atomic_read(&__tracepoint_block_bio_submit.key.enabled) > 0) {
+			struct page *page = bio_page(bio);
+			struct address_space *mapping = page ? page_mapping(page) : NULL;
+			struct inode *inode = mapping ? mapping->host : NULL;
+			unsigned long ino = 0;
+			char *name = "";
+			if (inode) {
+				if (!inode->i_ino) {
+					if ((void*)bio->bi_end_io == (void*)end_bio_bh_io_sync) {
+						struct buffer_head *bh = bio->bi_private;
+						if (bh->b_ino) {
+							ino = bh->b_ino;
+						}
+						if (bh->b_name) {
+							name = bh->b_name;
+						}
+					}
+				} else {
+					ino = inode->i_ino;
+					ext4_trace_inode_path(NULL, inode);
+				}
+				trace_block_bio_submit(bio, ino, name);
+			}
+		}
+
 		if (unlikely(bio_op(bio) == REQ_OP_WRITE_SAME))
 			count = bdev_logical_block_size(bio->bi_bdev) >> 9;
 		else
diff --git a/fs/block_dev.c b/fs/block_dev.c
index 9900693ed504..3ecd58dd5d94 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -312,9 +312,11 @@ static int blkdev_writepage(struct page *page, struct writeback_control *wbc)
 	return block_write_full_page(page, blkdev_get_block, wbc);
 }
 
+int __block_read_full_page(struct page *page, get_block_t *get_block, struct file *file);
+
 static int blkdev_readpage(struct file * file, struct page * page)
 {
-	return block_read_full_page(page, blkdev_get_block);
+	return __block_read_full_page(page, blkdev_get_block, file);
 }
 
 static int blkdev_readpages(struct file *file, struct address_space *mapping,
diff --git a/fs/buffer.c b/fs/buffer.c
index 3a8064d7e203..7abacfe54843 100644
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@ -2263,6 +2263,8 @@ int block_is_partially_uptodate(struct page *page, unsigned long from,
 }
 EXPORT_SYMBOL(block_is_partially_uptodate);
 
+void ext4_trace_inode_path(struct file *filp, struct inode *inode);
+
 /*
  * Generic "read page" function for block devices that have the normal
  * get_block functionality. This is most of the block device filesystems.
@@ -2270,7 +2272,7 @@ EXPORT_SYMBOL(block_is_partially_uptodate);
  * set/clear_buffer_uptodate() functions propagate buffer state into the
  * page struct once IO has completed.
  */
-int block_read_full_page(struct page *page, get_block_t *get_block)
+int __block_read_full_page(struct page *page, get_block_t *get_block, struct file *file)
 {
 	struct inode *inode = page->mapping->host;
 	sector_t iblock, lblock;
@@ -2278,6 +2280,12 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 	unsigned int blocksize, bbits;
 	int nr, i;
 	int fully_mapped = 1;
+	unsigned long ino = inode->i_ino;
+
+	if (file && file_inode(file)) {
+		ext4_trace_inode_path(file, file_inode(file));
+		ino = file_inode(file)->i_ino;
+	}
 
 	head = create_page_buffers(page, inode, 0);
 	blocksize = head->b_size;
@@ -2290,6 +2298,7 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 	i = 0;
 
 	do {
+		bh->b_ino = ino;
 		if (buffer_uptodate(bh))
 			continue;
 
@@ -2354,6 +2363,11 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 	}
 	return 0;
 }
+
+int block_read_full_page(struct page *page, get_block_t *get_block)
+{
+		return __block_read_full_page(page, get_block, 0);
+}
 EXPORT_SYMBOL(block_read_full_page);
 
 /* utility function for filesystems that need to do work on expanding
@@ -3028,7 +3042,7 @@ sector_t generic_block_bmap(struct address_space *mapping, sector_t block,
 }
 EXPORT_SYMBOL(generic_block_bmap);
 
-static void end_bio_bh_io_sync(struct bio *bio)
+void end_bio_bh_io_sync(struct bio *bio)
 {
 	struct buffer_head *bh = bio->bi_private;
 
diff --git a/fs/drop_caches.c b/fs/drop_caches.c
index 83750aad3ea4..91e6601992e0 100644
--- a/fs/drop_caches.c
+++ b/fs/drop_caches.c
@@ -88,6 +88,10 @@ int drop_caches_sysctl_handler(struct ctl_table *table, int write,
 							}
 							details.check_mapping = vma->vm_file->f_mapping;
 							printk(KERN_ERR "EMPTY: vma %lx %lx %s\n", vma->vm_start, vma->vm_end, path);
+							if (path[0] != '/') {
+								printk(KERN_ERR "  Skipping non-root, e.g. anon_inode:dmabuf, <error:> etc...\n");
+								continue;
+							}
 							if (strncmp(path, "/dev/", 5) == 0) {
 								printk(KERN_ERR "  Skipping /dev/...\n");
 								continue;
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 5f3d2e2bdbdf..ec772aa7c040 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2207,6 +2207,22 @@ struct mmpd_data {
 # define ATTRIB_NORET	__attribute__((noreturn))
 # define NORET_AND	noreturn,
 
+void ext4_trace_inode_path(struct file *filp, struct inode *inode);
+static inline struct buffer_head *
+ext4_sb_getblk(struct super_block *sb, sector_t block, struct inode* inode, char* name)
+{
+	struct buffer_head *bh = sb_getblk(sb, block);
+	if (bh) {
+		if (inode) {
+			ext4_trace_inode_path(NULL, inode);
+		}
+
+		bh->b_ino = inode ? inode->i_ino : 0;
+		bh->b_name = name;
+	}
+	return bh;
+}
+
 /* bitmap.c */
 extern unsigned int ext4_count_free(char *bitmap, unsigned numchars);
 void ext4_inode_bitmap_csum_set(struct super_block *sb, ext4_group_t group,
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 2748057a8a77..b994deb4fde2 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -45,6 +45,8 @@
 
 #include <trace/events/ext4.h>
 #include <trace/events/android_fs.h>
+#include "../internal.h"
+#include "../mount.h"
 
 #define MPAGE_DA_EXTENT_TAIL 0x01
 
@@ -766,6 +768,8 @@ static int _ext4_get_block(struct inode *inode, sector_t iblock,
 		map_bh(bh, inode->i_sb, map.m_pblk);
 		ext4_update_bh_state(bh, map.m_flags);
 		bh->b_size = inode->i_sb->s_blocksize * map.m_len;
+		bh->b_ino = inode->i_ino;
+		ext4_trace_inode_path(NULL, inode);
 		ret = 0;
 	}
 	return ret;
@@ -947,7 +951,7 @@ struct buffer_head *ext4_getblk(handle_t *handle, struct inode *inode,
 	if (err < 0)
 		return ERR_PTR(err);
 
-	bh = sb_getblk(inode->i_sb, map.m_pblk);
+	bh = ext4_sb_getblk(inode->i_sb, map.m_pblk, inode, 0);
 	if (unlikely(!bh))
 		return ERR_PTR(-ENOMEM);
 	if (map.m_flags & EXT4_MAP_NEW) {
@@ -2905,6 +2909,52 @@ static int ext4_nonda_switch(struct super_block *sb)
 	return 0;
 }
 
+extern atomic_t global_trace_version;
+void ext4_trace_inode_path(struct file *filp, struct inode *inode)
+{
+	if (!inode) {
+		return;
+	}
+
+	if (atomic_read(&__tracepoint_ext4_inode_path.key.enabled) > 0) {
+		int trace_version = atomic_read(&global_trace_version);
+		if (trace_version > inode->i_path_traced_version) {
+			struct path file_path = {};
+
+			// If we have a file, use the alias/root it has. Otherwise try to get any name for the inode.
+			if (filp) {
+				file_path = filp->f_path;
+				path_get(&file_path);
+			} else {
+				struct mount *m = NULL;
+				struct vfsmount *mnt = NULL;
+				lock_mount_hash();
+				m = list_first_entry_or_null(&inode->i_sb->s_mounts, struct mount, mnt_instance);
+				if (m) {
+					mnt = mntget(&m->mnt);
+				}
+				unlock_mount_hash();
+				file_path.mnt = mnt;
+				file_path.dentry = d_find_alias(inode);
+			}
+
+			if (file_path.dentry && file_path.mnt) {
+		    char buf[256];
+		    char* path = d_path(&file_path, buf, ARRAY_SIZE(buf));
+		    if (IS_ERR(path)) {
+		      snprintf(buf, ARRAY_SIZE(buf), "<error:%ld>", PTR_ERR(path));
+		      path = buf;
+		    }
+
+		    trace_ext4_inode_path(inode, trace_version, path);
+		    inode->i_path_traced_version = trace_version;
+		  }
+
+			path_put(&file_path);
+		}
+	}
+}
+
 /* We always reserve for an inode update; the superblock could be there too */
 static int ext4_da_write_credits(struct inode *inode, loff_t pos, unsigned len)
 {
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index d536e0ae8db8..2f7ce3639623 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -1546,6 +1546,8 @@ static struct dentry *ext4_lookup(struct inode *dir, struct dentry *dentry, unsi
 	struct ext4_dir_entry_2 *de;
 	struct buffer_head *bh;
 
+	ext4_trace_inode_path(NULL, dir);
+
 	if (ext4_encrypted_inode(dir)) {
 		int res = fscrypt_get_encryption_info(dir);
 
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 55be72dfc8e0..36583fb59d8b 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -926,6 +926,7 @@ static struct inode *ext4_alloc_inode(struct super_block *sb)
 		return NULL;
 
 	ei->vfs_inode.i_version = 1;
+	ei->vfs_inode.i_path_traced_version = 0;
 	spin_lock_init(&ei->i_raw_lock);
 	INIT_LIST_HEAD(&ei->i_prealloc_list);
 	spin_lock_init(&ei->i_prealloc_lock);
diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index 17ad41d88bea..72b68438592f 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -1300,6 +1300,8 @@ static void requeue_inode(struct inode *inode, struct bdi_writeback *wb,
 	}
 }
 
+void ext4_trace_inode_path(struct file *filp, struct inode *inode);
+
 /*
  * Write out an inode and its dirty pages. Do not update the writeback list
  * linkage. That is left to the caller. The caller is also responsible for
@@ -1315,6 +1317,7 @@ __writeback_single_inode(struct inode *inode, struct writeback_control *wbc)
 
 	WARN_ON(!(inode->i_state & I_SYNC));
 
+	ext4_trace_inode_path(NULL, inode);
 	trace_writeback_single_inode_start(inode, wbc, nr_to_write);
 
 	ret = do_writepages(mapping, wbc);
diff --git a/fs/jbd2/commit.c b/fs/jbd2/commit.c
index 31f8ca046639..93ec148f443d 100644
--- a/fs/jbd2/commit.c
+++ b/fs/jbd2/commit.c
@@ -152,6 +152,7 @@ static int journal_submit_commit_record(journal_t *journal,
 	clear_buffer_dirty(bh);
 	set_buffer_uptodate(bh);
 	bh->b_end_io = journal_end_buffer_io_sync;
+	bh->b_name = "journal";
 
 	if (journal->j_flags & JBD2_BARRIER &&
 	    !jbd2_has_feature_async_commit(journal))
@@ -717,6 +718,7 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 				clear_buffer_dirty(bh);
 				set_buffer_uptodate(bh);
 				bh->b_end_io = journal_end_buffer_io_sync;
+				bh->b_name = "journal";
 				submit_bh(REQ_OP_WRITE, WRITE_SYNC, bh);
 			}
 			cond_resched();
diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index d10bb2c30bf8..3047c732bee7 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -1361,6 +1361,7 @@ static int jbd2_write_superblock(journal_t *journal, int write_flags)
 	jbd2_superblock_csum_set(journal, sb);
 	get_bh(bh);
 	bh->b_end_io = end_buffer_write_sync;
+	bh->b_name = "journal";
 	ret = submit_bh(REQ_OP_WRITE, write_flags, bh);
 	wait_on_buffer(bh);
 	if (buffer_write_io_error(bh)) {
diff --git a/include/linux/buffer_head.h b/include/linux/buffer_head.h
index 4431ea2c8802..069f13e53dc2 100644
--- a/include/linux/buffer_head.h
+++ b/include/linux/buffer_head.h
@@ -75,6 +75,8 @@ struct buffer_head {
 	struct address_space *b_assoc_map;	/* mapping this buffer is
 						   associated with */
 	atomic_t b_count;		/* users using this buffer_head */
+	char* b_name;
+	unsigned long b_ino;
 };
 
 /*
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 22238e4c9533..bc881d61e9de 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -696,6 +696,7 @@ struct inode {
 		struct rcu_head		i_rcu;
 	};
 	u64			i_version;
+	int         i_path_traced_version;
 	atomic_t		i_count;
 	atomic_t		i_dio_count;
 	atomic_t		i_writecount;
diff --git a/include/trace/events/block.h b/include/trace/events/block.h
index 8f3a163b8166..3270705fb4a2 100644
--- a/include/trace/events/block.h
+++ b/include/trace/events/block.h
@@ -676,6 +676,34 @@ TRACE_EVENT(block_rq_remap,
 		  (unsigned long long)__entry->old_sector, __entry->nr_bios)
 );
 
+TRACE_EVENT(block_bio_submit,
+
+	TP_PROTO(struct bio *bio, unsigned long ino, char* name),
+
+	TP_ARGS(bio, ino, name),
+
+	TP_STRUCT__entry(
+		__field( dev_t,		 dev )
+		__field( sector_t, sector )
+		__field( unsigned int, nr_sector )
+		__field( unsigned long, ino )
+		__string( name, name )
+	),
+
+	TP_fast_assign(
+		__entry->dev		= bio->bi_bdev ? bio->bi_bdev->bd_dev : 0;
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio_sectors(bio);
+		__entry->ino	= ino;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%d,%d %llu + %u %lu [%s]",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long long)__entry->sector, __entry->nr_sector,
+		  (unsigned long)__entry->ino, __get_str(name))
+);
+
 #endif /* _TRACE_BLOCK_H */
 
 /* This part must be outside protection */
diff --git a/include/trace/events/ext4.h b/include/trace/events/ext4.h
index 09c71e9aaebf..2347e7c59900 100644
--- a/include/trace/events/ext4.h
+++ b/include/trace/events/ext4.h
@@ -2529,6 +2529,32 @@ TRACE_EVENT(ext4_es_shrink,
 		  __entry->scan_time, __entry->nr_skipped, __entry->retried)
 );
 
+TRACE_EVENT(ext4_inode_path,
+	TP_PROTO(struct inode *inode, int version, char *path),
+
+	TP_ARGS(inode, version, path),
+
+	TP_STRUCT__entry(
+		__field(	dev_t,	dev			)
+		__field(	ino_t,	ino			)
+		__field(	  int,	version	)
+		__string(	 path,	path	)
+	),
+
+	TP_fast_assign(
+		__entry->dev		= inode->i_sb->s_dev;
+		__entry->ino		= inode->i_ino;
+		__entry->version		= version;
+		__assign_str(path, path);
+	),
+
+	TP_printk("%d,%d %lu %d %s",
+		  MAJOR(__entry->dev), MINOR(__entry->dev),
+		  (unsigned long) __entry->ino,
+			__entry->version,
+		  __get_str(path))
+);
+
 #endif /* _TRACE_EXT4_H */
 
 /* This part must be outside protection */
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index a59af970aeba..4b6d00f9c3ef 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -739,8 +739,14 @@ static inline void ftrace_trace_stack(struct trace_array *tr,
 
 #endif
 
+atomic_t global_trace_version;
+
 static void tracer_tracing_on(struct trace_array *tr)
 {
+	if (tr == &global_trace) {
+		atomic_inc(&global_trace_version);
+	}
+
 	if (tr->trace_buffer.buffer)
 		ring_buffer_record_on(tr->trace_buffer.buffer);
 	/*
-- 
2.13.5

